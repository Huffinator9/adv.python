* Overview
In this mini-project, you will create a hero character and battle the powerful Evil Wizard. You'll use Object-Oriented Programming (OOP) concepts to extend starter code, customize your character, and add new functionality. Through a simple menu system, you'll control your character by choosing actions like attacking, using special abilities, healing, and viewing stats. Your task is to modify the starter code and defeat the Evil Wizard by implementing your own logic and design.

* Learning Objectives
   - Understand OOP Principles: Practice inheritance, methods, and interactions between objects in Python.
   - Build Interactive Programs: Implement a menu system for a turn-based game.
   - Design Game Logic: Manage attacks, healing, and enemy interactions to make gameplay dynamic.

* Project Requirements
** Create Your Own Character Classes:
   - Add two new character classes in addition to Warrior and Mage
      - Examples include:
         - Archer: A ranged attacker with abilities to shoot arrows and evade attacks.
         - Paladin: A defensive hero who can heal and shield against attacks.
   - Implement Special Abilities:
      - Each character must have two unique abilities, such as:
         - Archer: "Quick Shot" (double arrow attack) and "Evade" (evades the next attack ).
         - Paladin: "Holy Strike" (bonus damage) and "Divine Shield" (blocks the next attack).
   - Add a Healing Mechanic:
      - Implement a heal() method that restores health but does not exceed the maximum.
   - Randomize Attack Damage:
      - Modify the attack() method to deal random damage within a range.
   - Build a Turn-Based Battle System:
      - Players must choose actions such as attacking, healing, using abilities, or viewing stats.
   - Evil Wizard Logic:
      - The evil wizard should regenerate health and attack the player after each turn.
   - Display Victory/Defeat Messages:
      - End the game with a victory message for the player or a defeat message if the wizard wins.

** Bonus Tasks (Optional):
   - Create additional character classes with more complex mechanics.
   - Add random elements to the wizardâ€™s attacks or advanced abilities (e.g., summoning minions).
